from falcor import *

def render_graph_ForwardRenderer():
    g = RenderGraph('ForwardRenderer')
    loadRenderPassLibrary('BSDFViewer.dll')
    loadRenderPassLibrary('AccumulatePass.dll')
    loadRenderPassLibrary('DepthPass.dll')
    loadRenderPassLibrary('Antialiasing.dll')
    loadRenderPassLibrary('DebugPasses.dll')
    loadRenderPassLibrary('BlitPass.dll')
    loadRenderPassLibrary('CSM.dll')
    loadRenderPassLibrary('ErrorMeasurePass.dll')
    loadRenderPassLibrary('WhittedRayTracer.dll')
    loadRenderPassLibrary('ExampleBlitPass.dll')
    loadRenderPassLibrary('ForwardLightingPass.dll')
    loadRenderPassLibrary('GBuffer.dll')
    loadRenderPassLibrary('ImageLoader.dll')
    loadRenderPassLibrary('InteractionPass.dll')
    loadRenderPassLibrary('MegakernelPathTracer.dll')
    loadRenderPassLibrary('MinimalPathTracer.dll')
    loadRenderPassLibrary('PassLibraryTemplate.dll')
    loadRenderPassLibrary('PixelInspectorPass.dll')
    loadRenderPassLibrary('SceneDebugger.dll')
    loadRenderPassLibrary('SkyBox.dll')
    loadRenderPassLibrary('SSAO.dll')
    loadRenderPassLibrary('SVGFPass.dll')
    loadRenderPassLibrary('TemporalDelayPass.dll')
    loadRenderPassLibrary('ToneMapper.dll')
    loadRenderPassLibrary('Utils.dll')
    loadRenderPassLibrary('WireframePass.dll')
    InteractionPass = createPass('InteractionPass')
    g.addPass(InteractionPass, 'InteractionPass')
    DepthPrePass = createPass('DepthPass', {'depthFormat': ResourceFormat.D32Float})
    g.addPass(DepthPrePass, 'DepthPrePass')
    LightingPass = createPass('ForwardLightingPass', {'sampleCount': 1, 'enableSuperSampling': False})
    g.addPass(LightingPass, 'LightingPass')
    ShadowPass = createPass('CSM', {'mapSize': uint2(2048,2048), 'visibilityBufferSize': uint2(0,0), 'cascadeCount': 4, 'visibilityMapBitsPerChannel': 32, 'kSdsmReadbackLatency': 1, 'blurWidth': 5, 'blurSigma': 2.0})
    g.addPass(ShadowPass, 'ShadowPass')
    ToneMapping = createPass('ToneMapper', {'exposureCompensation': 0.0, 'autoExposure': True, 'filmSpeed': 100.0, 'whiteBalance': False, 'whitePoint': 6500.0, 'operator': ToneMapOp.Aces, 'clamp': True, 'whiteMaxLuminance': 1.0, 'whiteScale': 11.199999809265137, 'fNumber': 1.0, 'shutter': 1.0, 'exposureMode': ExposureMode.AperturePriority})
    g.addPass(ToneMapping, 'ToneMapping')
    SSAO = createPass('SSAO', {'aoMapSize': uint2(1024,1024), 'kernelSize': 16, 'noiseSize': uint2(16,16), 'radius': 0.10000000149011612, 'distribution': SampleDistribution.CosineHammersley, 'blurWidth': 5, 'blurSigma': 2.0})
    g.addPass(SSAO, 'SSAO')
    FXAA = createPass('FXAA', {'qualitySubPix': 0.75, 'qualityEdgeThreshold': 0.16599999368190765, 'qualityEdgeThresholdMin': 0.08330000191926956, 'earlyOut': True})
    g.addPass(FXAA, 'FXAA')
    SkyBox = createPass('SkyBox', {'texName': '', 'loadAsSrgb': True, 'filter': SamplerFilter.Linear})
    g.addPass(SkyBox, 'SkyBox')
    g.addEdge('DepthPrePass.depth', 'SkyBox.depth')
    g.addEdge('SkyBox.target', 'LightingPass.color')
    g.addEdge('DepthPrePass.depth', 'ShadowPass.depth')
    g.addEdge('DepthPrePass.depth', 'LightingPass.depth')
    g.addEdge('ShadowPass.visibility', 'LightingPass.visibilityBuffer')
    g.addEdge('LightingPass.color', 'ToneMapping.src')
    g.addEdge('ToneMapping.dst', 'SSAO.colorIn')
    g.addEdge('LightingPass.normals', 'SSAO.normals')
    g.addEdge('LightingPass.depth', 'SSAO.depth')
    g.addEdge('SSAO.colorOut', 'FXAA.src')
    g.addEdge('FXAA.dst', 'InteractionPass.src')
    g.markOutput('InteractionPass.dst')
    return g

ForwardRenderer = render_graph_ForwardRenderer()
try: m.addGraph(ForwardRenderer)
except NameError: None